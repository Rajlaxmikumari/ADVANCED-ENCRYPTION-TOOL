
###  src/crypto_engine.py (Core functionality)

```python
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding, hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend

class AESCipher:
    def __init__(self):
        self.salt_size = 16
        self.iv_size = 16
        self.iterations = 100000

    def _derive_key(self, password: str, salt: bytes) -> bytes:
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=self.iterations,
            backend=default_backend()
        )
        return kdf.derive(password.encode())

    def encrypt_file(self, input_path: str, password: str, output_path: str = None) -> str:
        salt = os.urandom(self.salt_size)
        iv = os.urandom(self.iv_size)
        
        with open(input_path, 'rb') as f:
            plaintext = f.read()

        key = self._derive_key(password, salt)
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        encryptor = cipher.encryptor()

        padder = padding.PKCS7(128).padder()
        padded_data = padder.update(plaintext) + padder.finalize()
        ciphertext = encryptor.update(padded_data) + encryptor.finalize()

        output_path = output_path or f"{input_path}.enc"
        with open(output_path, 'wb') as f:
            f.write(salt + iv + ciphertext)

        return output_path

    def decrypt_file(self, input_path: str, password: str, output_path: str = None) -> str:
        with open(input_path, 'rb') as f:
            data = f.read()
            salt = data[:self.salt_size]
            iv = data[self.salt_size:self.salt_size+self.iv_size]
            ciphertext = data[self.salt_size+self.iv_size:]

        key = self._derive_key(password, salt)
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        decryptor = cipher.decryptor()

        decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()
        unpadder = padding.PKCS7(128).unpadder()
        plaintext = unpadder.update(decrypted_data) + unpadder.finalize()

        if output_path is None:
            if input_path.endswith('.enc'):
                output_path = input_path[:-4]
            else:
                output_path = f"{input_path}.dec"

        with open(output_path, 'wb') as f:
            f.write(plaintext)

        return output_path
